# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Modified from the Apache Arrow project for the Terrier project.
#
---
Checks:     '
            bugprone-*,
            clang-analyzer-*,
            google-*,
            modernize-*,
            performance-*,
            portability-*,
            readability-*,
            -bugprone-too-small-loop-variable,
            -clang-analyzer-cplusplus.NewDelete,
            -clang-analyzer-cplusplus.NewDeleteLeaks,
            -modernize-use-nodiscard,
            -modernize-avoid-c-arrays,
            -readability-magic-numbers,
            -bugprone-branch-clone,
            -bugprone-signed-char-misuse,
            -bugprone-unhandled-self-assignment,
            -clang-diagnostic-implicit-int-float-conversion,
            -modernize-use-auto,
            -modernize-use-trailing-return-type,
            -readability-convert-member-functions-to-static,
            -readability-make-member-function-const,
            -readability-qualified-auto,
            -readability-redundant-access-specifiers,
            -bugprone-bad-signal-to-kill-th-read,
            -bugprone-branch-clone,
            -bugprone-dynamic-static-initializers,
            -bugprone-easily-swappable-parameters,
            -bugprone-implicit-widening-of-multiplication-result,
            -bugprone-infinite-loop,
            -bugprone-misplaced-pointer-arithmetic-in-alloc,
            -bugprone-no-escape,
            -bugprone-not-null-terminated-result,
            -bugprone-posix-return,
            -bugprone-redundant-branch-condition,
            -bugprone-reserved-identifier,
            -bugprone-signal-handler,
            -bugprone-signed-char-misuse,
            -bugprone-spuriously-wake-up-functions,
            -bugprone-stringview-nullptr,
            -bugprone-suspicious-include,
            -bugprone-suspicious-memory-comparison,
            -bugprone-unhandled-exception-at-new,
            -bugprone-unhandled-self-assignment,
            -bugprone-use-after-move,
            -bugprone-virtual-near-miss,
            -google-objc-avoid-nsobject-new,
            -google-readability-avoid-underscore-in--googletest-name,
            -google-upgrade--googletest-case,
            -readability-container-contains,
            -readability-container-data-pointer,
            -readability-convert-member-functions-to-static,
            -readability-duplicate-include,
            -readability-function-cognitive-complexity,
            -readability-identifier-length,
            -readability-misplaced-array-index,
            -readability-qualified-auto,
            -readability-redundant-access-specifiers,
            -readability-suspicious-call-argument,
            -readability-use-anyofallof,            
            '
CheckOptions:
  - { key: readability-identifier-naming.ClassCase,           value: CamelCase  }
  - { key: readability-identifier-naming.EnumCase,            value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,        value: CamelCase  }
  - { key: readability-identifier-naming.GlobalConstantCase,  value: UPPER_CASE }
  - { key: readability-identifier-naming.MemberCase,          value: lower_case }
  - { key: readability-identifier-naming.MemberSuffix,        value: _          }
  - { key: readability-identifier-naming.NamespaceCase,       value: lower_case }
  - { key: readability-identifier-naming.StructCase,          value: CamelCase  }
  - { key: readability-identifier-naming.UnionCase,           value: CamelCase  }
  - { key: readability-identifier-naming.VariableCase,        value: lower_case }
WarningsAsErrors: '*'
HeaderFilterRegex: '/(src|test)/include'
AnalyzeTemporaryDtors: true

#### Disabled checks and why: #####
#
# -bugprone-too-small-loop-variable,
#     Complains about uint8_t or uint16_t when the limit on the loop is a container's .size() (size_t).
#     We usually do this when we know the maximum size of the container though, so propose leaving disabled.
# -clang-analyzer-cplusplus.NewDelete,
#     Seems to generate false positives. Suggest relying on ASAN and valgrind for memory stuff.
# -clang-analyzer-cplusplus.NewDeleteLeaks,
#     Seems to generate false positives. Suggest relying on ASAN and valgrind for memory stuff.
# -modernize-use-nodiscard,
#     New C++17 feature, slightly polarizing. Would clutter codebase.
# -modernize-avoid-c-arrays,
#     We use C-style arrays in page.h, type.h and logger.h. They're a little more ergonomic than std::array. Thoughts?
# -readability-magic-numbers,
#     Let's not deal with people doing ridiculous things to hack around this. If it bites them, it bites them.
# -bugprone-branch-clone, -bugprone-signed-char-misuse, -bugprone-unhandled-self-assignment,
# -clang-diagnostic-implicit-int-float-conversion, -modernize-use-auto, -modernize-use-trailing-return-type,
# -readability-convert-member-functions-to-static, -readability-make-member-function-const, -readability-qualified-auto,
# -readability-redundant-access-specifiers
#    Not available on clang-8. Disable for forward compatibility with students running modern clang versions.



# Checks clang 14 add 
# -bugprone-bad-signal-to-kill-th-read,
# -bugprone-branch-clone,
# -bugprone-dynamic-static-initializers,
# -bugprone-easily-swappable-parameters,
# -bugprone-implicit-widening-of-multiplication-result,
# -bugprone-infinite-loop,
# -bugprone-misplaced-pointer-arithmetic-in-alloc,
# -bugprone-no-escape,
# -bugprone-not-null-terminated-result,
# -bugprone-posix-return,
# -bugprone-redundant-branch-condition,
# -bugprone-reserved-identifier,
# -bugprone-signal-handler,
# -bugprone-signed-char-misuse,
# -bugprone-spuriously-wake-up-functions,
# -bugprone-stringview-nullptr,
# -bugprone-suspicious-include,
# -bugprone-suspicious-memory-comparison,
# -bugprone-unhandled-exception-at-new,
# -bugprone-unhandled-self-assignment,
# -bugprone-use-after-move,
# -bugprone-virtual-near-miss,
# -google-objc-avoid-nsobject-new,
# -google-readability-avoid-underscore-in--googletest-name,
# -google-upgrade--googletest-case,
# -readability-container-contains,
# -readability-container-data-pointer,
# -readability-convert-member-functions-to-static,
# -readability-duplicate-include,
# -readability-function-cognitive-complexity,
# -readability-identifier-length,
# -readability-misplaced-array-index,
# -readability-qualified-auto,
# -readability-redundant-access-specifiers,
# -readability-suspicious-call-argument,
# -readability-use-anyofallof,
#
#----------duplicated
#


# Checks:     '
#               bugprone-argument-comment
#               bugprone-assert-side-effect
#               bugprone-bool-pointer-implicit-conversion
#               bugprone-copy-constructor-init
#               bugprone-dangling-handle
#               bugprone-exception-escape
#               bugprone-fold-init-type
#               bugprone-forward-declaration-namespace
#               bugprone-forwarding-reference-overload
#               bugprone-inaccurate-erase
#               bugprone-incorrect-roundings
#               bugprone-integer-division
#               bugprone-lambda-function-name
#               bugprone-macro-parentheses
#               bugprone-macro-repeated-side-effects
#               bugprone-misplaced-operator-in-strlen-in-alloc
#               bugprone-misplaced-widening-cast
#               bugprone-move-forwarding-reference
#               bugprone-multiple-statement-macro
#               bugprone-narrowing-conversions
#               bugprone-parent-virtual-call
#               bugprone-sizeof-container
#               bugprone-sizeof-expression
#               bugprone-string-constructor
#               bugprone-string-integer-assignment
#               bugprone-string-literal-with-embedded-nul
#               bugprone-suspicious-enum-usage
#               bugprone-suspicious-memset-usage
#               bugprone-suspicious-missing-comma
#               bugprone-suspicious-semicolon
#               bugprone-suspicious-string-compare
#               bugprone-swapped-arguments
#               bugprone-terminating-continue
#               bugprone-throw-keyword-missing
#               bugprone-undefined-memory-manipulation
#               bugprone-undelegated-constructor
#               bugprone-unused-raii
#               bugprone-unused-return-value
#               bugprone-use-after-move
#               bugprone-virtual-near-miss
#               clang-analyzer-apiModeling.StdCLibraryFunctions
#               clang-analyzer-apiModeling.TrustNonnull
#               clang-analyzer-apiModeling.google.GTest
#               clang-analyzer-core.CallAndMessage
#               clang-analyzer-core.DivideZero
#               clang-analyzer-core.DynamicTypePropagation
#               clang-analyzer-core.NonNullParamChecker
#               clang-analyzer-core.NonnilStringConstants
#               clang-analyzer-core.NullDereference
#               clang-analyzer-core.StackAddressEscape
#               clang-analyzer-core.UndefinedBinaryOperatorResult
#               clang-analyzer-core.VLASize
#               clang-analyzer-core.builtin.BuiltinFunctions
#               clang-analyzer-core.builtin.NoReturnFunctions
#               clang-analyzer-core.uninitialized.ArraySubscript
#               clang-analyzer-core.uninitialized.Assign
#               clang-analyzer-core.uninitialized.Branch
#               clang-analyzer-core.uninitialized.CapturedBlockVariable
#               clang-analyzer-core.uninitialized.UndefReturn
#               clang-analyzer-cplusplus.InnerPointer
#               clang-analyzer-cplusplus.Move
#               clang-analyzer-cplusplus.SelfAssignment
#               -clang-analyzer-cplusplus.NewDelete,
#               -clang-analyzer-cplusplus.NewDeleteLeaks,
#               clang-analyzer-deadcode.DeadStores
#               clang-analyzer-nullability.NullPassedToNonnull
#               clang-analyzer-nullability.NullReturnedFromNonnull
#               clang-analyzer-nullability.NullableDereferenced
#               clang-analyzer-nullability.NullablePassedToNonnull
#               clang-analyzer-nullability.NullableReturnedFromNonnull
#               clang-analyzer-optin.cplusplus.VirtualCall
#               clang-analyzer-optin.mpi.MPI-Checker
#               clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
#               clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
#               clang-analyzer-optin.performance.GCDAntipattern
#               clang-analyzer-optin.performance.Padding
#               clang-analyzer-optin.portability.UnixAPI
#               clang-analyzer-osx.API
#               clang-analyzer-osx.NumberObjectConversion
#               clang-analyzer-osx.OSObjectRetainCount
#               clang-analyzer-osx.ObjCProperty
#               clang-analyzer-osx.SecKeychainAPI
#               clang-analyzer-osx.cocoa.AtSync
#               clang-analyzer-osx.cocoa.AutoreleaseWrite
#               clang-analyzer-osx.cocoa.ClassRelease
#               clang-analyzer-osx.cocoa.Dealloc
#               clang-analyzer-osx.cocoa.IncompatibleMethodTypes
#               clang-analyzer-osx.cocoa.Loops
#               clang-analyzer-osx.cocoa.MissingSuperCall
#               clang-analyzer-osx.cocoa.NSAutoreleasePool
#               clang-analyzer-osx.cocoa.NSError
#               clang-analyzer-osx.cocoa.NilArg
#               clang-analyzer-osx.cocoa.NonNilReturnValue
#               clang-analyzer-osx.cocoa.ObjCGenerics
#               clang-analyzer-osx.cocoa.RetainCount
#               clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
#               clang-analyzer-osx.cocoa.SelfInit
#               clang-analyzer-osx.cocoa.SuperDealloc
#               clang-analyzer-osx.cocoa.UnusedIvars
#               clang-analyzer-osx.cocoa.VariadicMethodTypes
#               clang-analyzer-osx.coreFoundation.CFError
#               clang-analyzer-osx.coreFoundation.CFNumber
#               clang-analyzer-osx.coreFoundation.CFRetainRelease
#               clang-analyzer-osx.coreFoundation.containers.OutOfBounds
#               clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
#               clang-analyzer-security.FloatLoopCounter
#               clang-analyzer-security.insecureAPI.UncheckedReturn
#               clang-analyzer-security.insecureAPI.bcmp
#               clang-analyzer-security.insecureAPI.bcopy
#               clang-analyzer-security.insecureAPI.bzero
#               clang-analyzer-security.insecureAPI.getpw
#               clang-analyzer-security.insecureAPI.gets
#               clang-analyzer-security.insecureAPI.mkstemp
#               clang-analyzer-security.insecureAPI.mktemp
#               clang-analyzer-security.insecureAPI.rand
#               clang-analyzer-security.insecureAPI.strcpy
#               clang-analyzer-security.insecureAPI.vfork
#               clang-analyzer-unix.API
#               clang-analyzer-unix.Malloc
#               clang-analyzer-unix.MallocSizeof
#               clang-analyzer-unix.MismatchedDeallocator
#               clang-analyzer-unix.Vfork
#               clang-analyzer-unix.cstring.BadSizeArg
#               clang-analyzer-unix.cstring.NullArg
#               clang-analyzer-valist.CopyToSelf
#               clang-analyzer-valist.Uninitialized
#               clang-analyzer-valist.Unterminated
#               google-build-explicit-make-pair
#               google-build-namespaces
#               google-build-using-namespace
#               google-default-arguments
#               google-explicit-constructor
#               google-global-names-in-headers
#               google-objc-avoid-throwing-exception
#               google-objc-function-naming
#               google-objc-global-variable-declaration
#               google-readability-braces-around-statements
#               google-readability-casting
#               google-readability-function-size
#               google-readability-namespace-comments
#               google-readability-todo
#               google-runtime-int
#               google-runtime-operator
#               google-runtime-references
#               modernize-avoid-bind
#               modernize-concat-nested-namespaces
#               modernize-deprecated-headers
#               modernize-deprecated-ios-base-aliases
#               modernize-loop-convert
#               modernize-make-shared
#               modernize-make-unique
#               modernize-pass-by-value
#               modernize-raw-string-literal
#               modernize-redundant-void-arg
#               modernize-replace-auto-ptr
#               modernize-replace-random-shuffle
#               modernize-return-braced-init-list
#               modernize-shrink-to-fit
#               modernize-unary-static-assert
#               modernize-use-bool-literals
#               modernize-use-default-member-init
#               modernize-use-emplace
#               modernize-use-equals-default
#               modernize-use-equals-delete
#               modernize-use-noexcept
#               modernize-use-nullptr
#               modernize-use-override
#               modernize-use-transparent-functors
#               modernize-use-uncaught-exceptions
#               modernize-use-using
#               performance-faster-string-find
#               performance-for-range-copy
#               performance-implicit-conversion-in-loop
#               performance-inefficient-algorithm
#               performance-inefficient-string-concatenation
#               performance-inefficient-vector-operation
#               performance-move-const-arg
#               performance-move-constructor-init
#               performance-noexcept-move-constructor
#               performance-type-promotion-in-math-fn
#               performance-unnecessary-copy-initialization
#               performance-unnecessary-value-param
#               portability-simd-intrinsics
#               readability-avoid-const-params-in-decls
#               readability-braces-around-statements
#               readability-const-return-type
#               readability-container-size-empty
#               readability-delete-null-pointer
#               readability-deleted-default
#               readability-else-after-return
#               readability-function-size
#               readability-identifier-naming
#               readability-implicit-bool-conversion
#               readability-inconsistent-declaration-parameter-name
#               readability-isolate-declaration
#               readability-misleading-indentation
#               readability-misplaced-array-index
#               readability-named-parameter
#               readability-non-const-parameter
#               readability-redundant-control-flow
#               readability-redundant-declaration
#               readability-redundant-function-ptr-dereference
#               readability-redundant-member-init
#               readability-redundant-preprocessor
#               readability-redundant-smartptr-get
#               readability-redundant-string-cstr
#               readability-redundant-string-init
#               readability-simplify-boolean-expr
#               readability-simplify-subscript-expr
#               readability-static-accessed-through-instance
#               readability-static-definition-in-anonymous-namespace
#               readability-string-compare
#               readability-uniqueptr-delete-release
#               readability-uppercase-literal-suffix
#             '